<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Greg Chadwick</title>
    <link>https://gregchadwick.co.uk/blog/</link>
    <description>Recent content in Blog on Greg Chadwick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Fri, 23 Jul 2021 12:00:00 +0000</lastBuildDate><atom:link href="https://gregchadwick.co.uk/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a RISC-V simulator in Rust - Part 1</title>
      <link>https://gregchadwick.co.uk/blog/building-rrs-pt1/</link>
      <pubDate>Fri, 23 Jul 2021 12:00:00 +0000</pubDate>
      
      <guid>https://gregchadwick.co.uk/blog/building-rrs-pt1/</guid>
      <description>As way to gain some more experience using Rust I decided to implement a RISC-V instruction set simulation in Rust that I have imaginatively called rrs, the Rust RISC-V Simulator. So far I&amp;rsquo;ve implemented the RV32IM instruction set (For those unfamiliar with RISC-V this is all the basic instructions, ALU operations, branching, load/store, multiplication/division etc without any of the OS/system level stuff like exceptions or memory management and none of the more complex/interesting extensions like atomics).</description>
    </item>
    
    <item>
      <title>Playing with the Pico Part 6 - SNES like sprites and tilemap with VGA</title>
      <link>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt6/</link>
      <pubDate>Wed, 28 Apr 2021 12:00:00 +0000</pubDate>
      
      <guid>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt6/</guid>
      <description>In Part 5 we produced a simple video test pattern, how about something more interesting, like this?
 Full code can be found on github
This is the final result of the code discussed below, so how does it all work?
It would be straight-forward to display a static image or framebuffer. With the 320x240 resolution and 2 bytes per pixel that&amp;rsquo;s 150 KiB which we can fit in the Pico&amp;rsquo;s memory.</description>
    </item>
    
    <item>
      <title>Playing with the Pico Part 5 - Producing VGA Video</title>
      <link>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt5/</link>
      <pubDate>Sun, 14 Mar 2021 12:00:00 +0000</pubDate>
      
      <guid>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt5/</guid>
      <description>Lets talk about VGA signalling. VGA uses 5 wires, 3 are analog signals and represent red, green and blue, the higher the voltage the brighter the colour. The other 2 are sync and are digital signals, they tell the monitor how the colour signals relate to the pixels.
One of the sync signals is the horizontal sync (HSYNC), the other is the vertical (VSYNC). They both work in very similar ways, let&amp;rsquo;s take a look at the horizontal sync first.</description>
    </item>
    
    <item>
      <title>Playing with the Pico Part 4 - Getting Acquainted with PIO</title>
      <link>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt4/</link>
      <pubDate>Sat, 27 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt4/</guid>
      <description>I wanted to learn more about the RP2040&amp;rsquo;s PIO (programmable input/output) functionality. The PIO is a unique feature of the RP2040 which gives you fast precise control of the GPIO pins with programmable state machines. On other microcontrollers where you need to implement an interface (such as I2C or SPI) where hardware support isn&amp;rsquo;t available or you want more interfaces than the hardware provides you need to &amp;lsquo;bitbang&amp;rsquo;. Writing a program that manually toggles and reads pins, sometimes requiring careful programming to time things correctly.</description>
    </item>
    
    <item>
      <title>Playing with the Pico Part 3 - PWM Audio</title>
      <link>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt3/</link>
      <pubDate>Sat, 06 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt3/</guid>
      <description>I decided to experiment with audio on the pico next. The pico doesn&amp;rsquo;t directly give you a DAC (digital to analog converter) to produce an audio signal so you need extra circuitry to get one. There are of course many chips that can the job for you but there&amp;rsquo;s a simple way using PWM along with a capacitor and a resistor or two.
When driving LEDs with PWM, the inability of our eyes to see sufficiently rapid flickering means the fully on to fully off blurs into varying levels of brightness.</description>
    </item>
    
    <item>
      <title>Playing with the Pico Part 2 - Driving PWM with DMA</title>
      <link>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt2/</link>
      <pubDate>Sun, 31 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt2/</guid>
      <description>One of the things that interested me on the Pico was the DMA engine. For those who don&amp;rsquo;t know DMA stands for Direct Memory Access. It&amp;rsquo;s something which can do memory copies for you. A basic DMA engine takes a source address, a destination address and a length and copies data from source to destination. This frees up the CPU from memory copy loops allowing it to do other things. They&amp;rsquo;re vital parts of many computer systems and have been for decades, so what&amp;rsquo;s so interesting about the Pico&amp;rsquo;s DMA?</description>
    </item>
    
    <item>
      <title>Playing with the Pico Part 1 - Getting Started</title>
      <link>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt1/</link>
      <pubDate>Sat, 30 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://gregchadwick.co.uk/blog/playing-with-the-pico-pt1/</guid>
      <description>I was intrigued by the Raspberry Pi Pico when it was released. Whilst the dual m0+ cores weren&amp;rsquo;t out of the ordinary the peripherals around them offered some interesting possibilities. In particular the PIO (programmable IO) units are very unique, they have programmable state machines that can directly control GPIO pins letting you implement all manner of protocols and behaviour without having to worry the two CPUs with tight loops doing bit-banging, plus you get very precise timing control.</description>
    </item>
    
  </channel>
</rss>
